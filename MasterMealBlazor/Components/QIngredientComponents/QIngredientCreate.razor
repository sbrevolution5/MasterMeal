@using MasterMealBlazor.Enums
@using MasterMealBlazor.Services.Interfaces
@using MasterMealBlazor.Components.QIngredientComponents
@page "/qingredient/Create"
@inject IDbContextFactory<ApplicationDbContext> ContextFactory
@inject IIngredientService ingredientService
@inject NavigationManager navigationManager
@if (ingredients == null || qIngredient is null || measurementType is null)
{
    <p>loading</p>
}
else
{
    <div class="card m-1 shadow">
        <EditForm Model="@qIngredient">
            <label>Ingredient Name</label>
            <InputSelect ValueExpression="@(()=>qIngredient.IngredientId)" Value="@qIngredient.IngredientId" ValueChanged="@((int id)=>TypeChange(id))">
                <option value="">Select An Ingredient</option>
                @foreach (var ingredient in ingredients)
                {
                    <option value="@ingredient.Id">@ingredient.Name</option>
                }
            </InputSelect>
            <div class="row">
                <div class="col">
                    <label>Quantity</label>
                    <InputNumber @bind-Value="qIngredient.QuantityNumber" TValue="int" />
                    <InputSelect @bind-Value="qIngredient.Fraction">
                        @foreach (var fraction in Enum.GetValues(typeof(Fraction)))
                            {
                            <option value="@fraction">@fraction</option>
                            }
                    </InputSelect>
                    @if (measurementType == MeasurementType.Volume)
                    {

                        <InputSelect @bind-Value="qIngredient.VolumeMeasurementUnit">
                            <option value="">Select A Unit</option>
                            @foreach (var unit in Enum.GetValues(typeof(VolumeMeasurementUnit)))
                                    {
                                <option value="@unit">@unit</option>
                                    }
                        </InputSelect>
                    }
                    else if (measurementType == MeasurementType.Mass)
                    {

                        <InputSelect @bind-Value="qIngredient.MassMeasurementUnit">
                            <option value="">Select A Unit</option>
                            @foreach (var unit in Enum.GetValues(typeof(MassMeasurementUnit)))
                                    {
                                <option value="@unit">@unit</option>
                                    }
                        </InputSelect>
                    }
                    else if (measurementType == MeasurementType.Count)
                    {
                    }
                    else
                    {
                        <p>please select an ingredient</p>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label>Shopping Notes:</label>
                    <InputText @bind-Value="qIngredient.Notes" />

                </div>
            </div>


            @*<button type="submit">Add Ingredient</button>*@
        </EditForm>
    </div>
}
@code {
    [Parameter]
    public QIngredient qIngredient { get; set; }

    private MeasurementType? measurementType = null;
    private List<Ingredient> ingredients = new();
    protected override async Task OnInitializedAsync()
    {
        using (var context = ContextFactory.CreateDbContext())
        {
            ingredients = await context.Ingredient.ToListAsync();
        }
        qIngredient.Notes = "";
        qIngredient.QuantityNumber = 1;
        TypeChange(ingredients.First().Id);
    }
    public void TypeChange(int id)
    {
        qIngredient.IngredientId = id;
        measurementType = ingredients.FirstOrDefault(i => i.Id == id).MeasurementType;
        qIngredient.MeasurementType = measurementType.Value;
        return;
    }
    //public async void CreateQIngredient()
    //{
    //    using (var context = ContextFactory.CreateDbContext())
    //    {

    //        context.Add(qIngredient);
    //        await context.SaveChangesAsync();

    //    }
    //    navigationManager.NavigateTo("/recipe/index");
    //}
}
